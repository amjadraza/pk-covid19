{
  
    
        "post0": {
            "title": "COVID-19 Growth PAK",
            "content": "Number of confirmed Cases . . .",
            "url": "https://amjadraza.github.io/pk-covid19/growth-pk/",
            "relUrl": "/growth-pk/",
            "date": " • Apr 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "COVID-19 Dash App Demo",
            "content": "%%sh pip install -q dash pip install -q dash_core_components pip install -q dash_html_components pip install -q dash_table . %%sh # get ngrok curl -O https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip unzip ngrok-stable-linux-amd64.zip . Dash . %%writefile dash_app.py import dash import dash_core_components as dcc import dash_html_components as html external_stylesheets = [&#39;https://codepen.io/chriddyp/pen/bWLwgP.css&#39;] app = dash.Dash(__name__)#, external_stylesheets=external_stylesheets) app.layout = html.Div(children=[ html.H1(children=&#39;Hello Dash&#39;), html.Div(children=&#39;&#39;&#39; Dash: A web application framework for Python. &#39;&#39;&#39;), dcc.Graph( id=&#39;example-graph&#39;, figure={ &#39;data&#39;: [ {&#39;x&#39;: [1, 2, 3], &#39;y&#39;: [4, 1, 2], &#39;type&#39;: &#39;bar&#39;, &#39;name&#39;: &#39;SF&#39;}, {&#39;x&#39;: [1, 2, 3], &#39;y&#39;: [2, 4, 5], &#39;type&#39;: &#39;bar&#39;, &#39;name&#39;: u&#39;Montréal&#39;}, ], &#39;layout&#39;: { &#39;title&#39;: &#39;Dash Data Visualization&#39; } } ) ]) if __name__ == &#39;__main__&#39;: app.run_server(debug=True) . # launch ngrok get_ipython().system_raw(&#39;./ngrok http 8050 &amp;&#39;) . %%sh # get url with ngrok curl -s http://localhost:4040/api/tunnels | python3 -c &quot;import sys, json; print(json.load(sys.stdin)[&#39;tunnels&#39;][0][&#39;public_url&#39;])&quot; . !python dash_app.py . Running on http://127.0.0.1:8050/ Debugger PIN: 104-591-087 * Serving Flask app &#34;dash_app&#34; (lazy loading) * Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Debug mode: on Running on http://127.0.0.1:8050/ Debugger PIN: 102-912-711 .",
            "url": "https://amjadraza.github.io/pk-covid19/dash-demo/",
            "relUrl": "/dash-demo/",
            "date": " • Apr 1, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://amjadraza.github.io/pk-covid19/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://amjadraza.github.io/pk-covid19/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "About This Project . This site was built by MA Raza, Hasan Nasir . and Waqr Baig . The purpose of this website is to offer community to publish the analysis easily. . The contributions are welcomed. Please read the contribution guide . This website is powered by fastpages, a blogging platform that natively supports Jupyter notebooks in addition to other formats.1 View this project on GitHub. . Contributing . Do you have a visualization that you would like to add? Or would you like to improve or fix an existing visualization? . Please see the Contributing Guide. . You can also get in touch if you have any questions. . Background . The motivation about this website is to help contributor participating in PK-COVID19-HACKATHON easily publish their findings or write blogs easily. . Inspired by covid19dashboards . Familiarity with fastpages is helpful. All you need to do is include the appropriate front matter in your notebook. You can submit a pull request at github.com/github/covid19-dashboard. &#8617; . |",
          "url": "https://amjadraza.github.io/pk-covid19/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Resources",
          "content": "Related Articles &amp; Further Information . This website contains visualizations and analysis built from data sources that are updated regularly. However, there are other useful sources of information beyond these visualizations that may be helpful, which we have started to curate here: . Want to add something to this list? Edit this file on GitHub and make a pull request! . Data Sources . COVID-19 related public projects on GitHub: A comprehensive versioned dataset of the repositories and relevant related metadata about public projects hosted on GitHub related to the 2019 Novel Coronavirus and associated COVID-19 disease. | The CDC’s page on the Coronavirus. | 2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE: Powers many of the visualizations on this site. This data must be used with care as there are known issues. This aggregates 14+ data sources from around the world. | covidtracking.com: Provides an API for detailed data concerning the United States. Includes positive and negative results, pending tests, and total people tested for each state or district currently reporting that data. | Boston’s Children’s Hospital Health Map project. Includes this GitHub repo and this Google sheet | Official Italian government GitHub repo. Updated regularly by the Italian Ministry of Health and Dipartimento di Protezione Civile. Contains multiple indicators such as number of total cases, number in ICU, number of tests done, etc. | Folding@Home Dataset: A dataset that can assist researchers simulating potentially druggable protein targets. | Temporal variation in transmission dataset: data that can be used to identify changes in the reproduction number, rate of spread, and doubling time during the course of the COVID-19 outbreak whilst accounting for potential biases due to delays in case reporting. | New York Times Dataset: Contains state-level and county-level data based on reports from state and local health agencies. Certain geographical exceptions are present which are mentioned therewith. | Models of Infectious Disease Agent Study (MIDAS) Network has listed computable information (in CSV format) relevant for modeling of the COVID-19 outbreak. | . Articles . Why outbreaks like the coronavirus spread exponentially and how to flatten the curve Washington Post, Mar 14, 2020 | COVID-19 outbreak response: first assessment of mobility changes in Italy following lockdown Mar 13, 2020 | Open letter from Italy to the interational scientific community Mar 13, 2020 | Covid-19, your community, and you — a data science perspective Mar 9, 2020 | . Projects . Covid-19 in US and Canada: This is the best information I have seen for the US. Even provides case details in some cases. Really well organized dashboard with a plethora of information. | nCoV2019.live: Dashboard that presents global statistics about COVID-19 in a tabular format. | COVID-19 Clinical Trials Dashboard: Interactive dashboard that tracks clinical trials related to COVID-19. Uses clinicaltrials.gov data and is updated using API calls. | Search Trends for Coronavirus Symptoms, by Country: Shows search trends for coronavirus symptoms in the native language of the top-50 populated countries in the world (excluding China). | Python Open Source Dashboard: Interactive Covid-19 Dashboard, built from scratch in Python on open source Plotly Dash with very few lines of code, including an animating global timeline map. Read ‘About this Dashboard’ in the Dashboard itself. It‘s open source and open for collaboration. | COVID-19 Tracker—Days since N: Shiny app that allows users to select countries and compare cumulative outcomes and growth rates on a standardized x-axis. Easy download of plots and filtered data tables in PNG and CSV formats, respectively. | Effectiveness of airport screening at detecting travellers infected with novel coronavirus COVID-19: Simulation that illustrates the impact of airport screening. | Covid-19 Online Screening Tool - screencovid.com: Assess your risk for COVID-19. | Coronavirus Diary: Coronavirus Diary is a mobile application that allows users to complete daily health checkups and receive personalized symptom assessments. If the user experiences symptoms in line with the disease, they will be prompted to contact their physician. | A collection of Open Source COVID-19 projects. Is a collection of resources on open source, data, analysis, dashboards and maps. | corona-cli: 🦠 Track the Coronavirus disease (COVID-19) or the Novel Coronavirus Strain in the command line. Both worldwide for all countries, for one country, or for the US States. Fast response time (&lt; 100ms). | Genomic Epidemiology of novel coronavirus with visual depiction of genomes sampled between Dec 2019-present. | .",
          "url": "https://amjadraza.github.io/pk-covid19/resources/",
          "relUrl": "/resources/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

}